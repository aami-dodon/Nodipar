generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum RsvpStatus {
  GOING
  INTERESTED
  NOT_GOING
}

enum MediaType {
  IMAGE
  VIDEO
}

enum ThreadType {
  DIRECT
  GROUP
  EVENT
}

enum ParticipantRole {
  MEMBER
  ADMIN
}

enum NotificationCategory {
  POST
  EVENT
  CHAT
  BIRTHDAY
  BADGE
  RESOURCE
  ANNOUNCEMENT
}

enum DigestFrequency {
  DAILY
  WEEKLY
  MONTHLY
  NEVER
}

enum ResourceType {
  DOCUMENT
  IMAGE
  VIDEO
  AUDIO
  LINK
}

enum ActivityType {
  POST_CREATED
  COMMENT_CREATED
  REACTION_ADDED
  EVENT_CREATED
  RSVP_UPDATED
  POLL_VOTED
  MEDIA_UPLOADED
  BADGE_EARNED
}

enum ReportTargetType {
  POST
  COMMENT
  MESSAGE
  MEDIA
  USER
}

enum ReportStatus {
  PENDING
  IN_REVIEW
  RESOLVED
  DISMISSED
}

model User {
  id               Int                   @id @default(autoincrement())
  fullName         String
  email            String                @unique
  avatarUrl        String?
  batchYear        Int?
  location         String?
  bio              String?
  socialLinks      Json?
  privacySettings  Json?
  birthDate        DateTime?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  posts            Post[]
  comments         Comment[]
  reactions        Reaction[]
  announcements    Announcement[]
  events           Event[]               @relation("EventCreator")
  eventRsvps       EventRsvp[]
  eventMessages    EventMessage[]
  polls            Poll[]
  pollVotes        PollVote[]
  albums           Album[]
  mediaItems       MediaItem[]
  threadCreated    ChatThread[]          @relation("ThreadCreator")
  threadMembership ThreadParticipant[]
  messages         Message[]
  messageReactions MessageReaction[]
  notifications    Notification[]
  notificationPref NotificationPreference?
  resources        Resource[]
  badges           UserBadge[]
  activityLogs     ActivityLog[]
  reportsFiled     Report[]              @relation("ReportReporter")
  reportsResolved  Report[]              @relation("ReportResolver")
}

model Post {
  id          Int         @id @default(autoincrement())
  authorId    Int
  author      User        @relation(fields: [authorId], references: [id])
  content     String
  mediaUrl    String?
  mediaType   String?
  hashtags    String[]
  isPinned    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  comments    Comment[]
  reactions   Reaction[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  body      String
  createdAt DateTime @default(now())
}

model Reaction {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  type      String
  createdAt DateTime @default(now())

  @@unique([postId, userId, type])
}

model Announcement {
  id           Int      @id @default(autoincrement())
  title        String
  body         String
  createdById  Int
  createdBy    User     @relation(fields: [createdById], references: [id])
  scheduledFor DateTime?
  isPublished  Boolean  @default(false)
  createdAt    DateTime @default(now())
}

model Event {
  id             Int           @id @default(autoincrement())
  title          String
  description    String
  location       String?
  coverImage     String?
  startAt        DateTime
  endAt          DateTime
  createdById    Int
  createdBy      User          @relation("EventCreator", fields: [createdById], references: [id])
  tags           String[]
  isArchived     Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  rsvps          EventRsvp[]
  messages       EventMessage[]
  polls          Poll[]
  albums         Album[]
  chatThreads    ChatThread[]
}

model EventRsvp {
  id          Int        @id @default(autoincrement())
  eventId     Int
  event       Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  status      RsvpStatus
  respondedAt DateTime   @default(now())

  @@unique([eventId, userId])
}

model EventMessage {
  id        Int      @id @default(autoincrement())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  body      String
  createdAt DateTime @default(now())
}

model Poll {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  isAnonymous Boolean      @default(false)
  createdById Int
  createdBy   User         @relation(fields: [createdById], references: [id])
  closesAt    DateTime?
  eventId     Int?
  event       Event?       @relation(fields: [eventId], references: [id])
  createdAt   DateTime     @default(now())
  options     PollOption[]
  votes       PollVote[]
}

model PollOption {
  id     Int        @id @default(autoincrement())
  pollId Int
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  label  String
  votes  PollVote[]
}

model PollVote {
  id        Int      @id @default(autoincrement())
  optionId  Int
  option    PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([optionId, userId])
}

model Album {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  eventId     Int?
  event       Event?      @relation(fields: [eventId], references: [id])
  createdById Int
  createdBy   User        @relation(fields: [createdById], references: [id])
  coverImage  String?
  createdAt   DateTime    @default(now())
  media       MediaItem[]
}

model MediaItem {
  id            Int           @id @default(autoincrement())
  albumId       Int
  album         Album         @relation(fields: [albumId], references: [id], onDelete: Cascade)
  uploaderId    Int
  uploader      User          @relation(fields: [uploaderId], references: [id])
  url           String
  type          MediaType
  caption       String?
  taggedUserIds Int[]
  createdAt     DateTime      @default(now())
  comments      MediaComment[]
}

model MediaComment {
  id        Int      @id @default(autoincrement())
  mediaId   Int
  media     MediaItem @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  body      String
  createdAt DateTime @default(now())
}

model ChatThread {
  id           Int                 @id @default(autoincrement())
  title        String?
  type         ThreadType
  createdById  Int
  createdBy    User                @relation("ThreadCreator", fields: [createdById], references: [id])
  eventId      Int?
  event        Event?              @relation(fields: [eventId], references: [id])
  createdAt    DateTime            @default(now())
  messages     Message[]
  participants ThreadParticipant[]
}

model ThreadParticipant {
  id        Int      @id @default(autoincrement())
  threadId  Int
  thread    ChatThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  role      ParticipantRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  @@unique([threadId, userId])
}

model Message {
  id           Int      @id @default(autoincrement())
  threadId     Int
  thread       ChatThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  senderId     Int
  sender       User     @relation(fields: [senderId], references: [id])
  body         String?
  attachments  Json?
  voiceNoteUrl String?
  createdAt    DateTime @default(now())
  reactions    MessageReaction[]
}

model MessageReaction {
  id        Int      @id @default(autoincrement())
  messageId Int
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  emoji     String
  createdAt DateTime @default(now())

  @@unique([messageId, userId, emoji])
}

model Notification {
  id        Int                  @id @default(autoincrement())
  userId    Int
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  category  NotificationCategory
  payload   Json
  readAt    DateTime?
  createdAt DateTime             @default(now())
}

model NotificationPreference {
  id             Int             @id @default(autoincrement())
  userId         Int             @unique
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailDigestFrequency DigestFrequency @default(WEEKLY)
  pushEnabled    Boolean         @default(true)
  emailEnabled   Boolean         @default(true)
  quietStart     Int?
  quietEnd       Int?
  categories     Json?
  updatedAt      DateTime        @updatedAt
}

model Resource {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  type        ResourceType
  url         String
  uploadedById Int
  uploadedBy  User       @relation(fields: [uploadedById], references: [id])
  tags        String[]
  createdAt   DateTime   @default(now())
}

model Badge {
  id          Int        @id @default(autoincrement())
  code        String     @unique
  label       String
  description String?
  points      Int        @default(0)
  icon        String?
  userBadges  UserBadge[]
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeId   Int
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  awardedAt DateTime @default(now())
  note      String?
}

model ActivityLog {
  id        Int          @id @default(autoincrement())
  userId    Int
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      ActivityType
  points    Int          @default(0)
  metadata  Json?
  createdAt DateTime     @default(now())
}

model Report {
  id            Int           @id @default(autoincrement())
  reporterId    Int
  reporter      User          @relation("ReportReporter", fields: [reporterId], references: [id])
  targetType    ReportTargetType
  targetId      Int
  reason        String
  details       String?
  status        ReportStatus  @default(PENDING)
  createdAt     DateTime      @default(now())
  resolvedAt    DateTime?
  resolvedById  Int?
  resolvedBy    User?         @relation("ReportResolver", fields: [resolvedById], references: [id])
}
